State 120 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: func-def

    2 func-def: header local-def_list block

    3 local-def_list: %empty
    4               | local-def_list local-def

    5 header: "fun" T_id '(' fpar-def fpar-def_list ')' ':' ret-type

    6 fpar-def_list: %empty
    7              | fpar-def_list ';' fpar-def

    8 fpar-def: %empty
    9         | T_id id_list ':' fpar-type
   10         | "ref" T_id id_list ':' fpar-type

   11 id_list: %empty
   12        | id_list ',' T_id

   13 data-type: "int"
   14          | "char"

   15 type: data-type int-const_list

   16 int-const_list: %empty
   17               | int-const_list '[' T_const ']'

   18 ret-type: data-type
   19         | "nothing"

   20 fpar-type: data-type
   21          | data-type '[' ']' int-const_list
   22          | data-type '[' T_const ']' int-const_list

   23 local-def: func-def
   24          | func-decl
   25          | var-def

   26 func-decl: header ';'

   27 var-def: "var" T_id id_list ':' type ';'

   28 stmt: ';'
   29     | l-value T_assign expr ';'
   30     | block
   31     | func-call ';'
   32     | "if" cond "then" stmt
   33     | "if" cond "then" stmt "else" stmt
   34     | "while" cond "do" stmt
   35     | "return" ';'
   36     | "return" expr ';'

   37 block: '{' stmt_list '}'

   38 stmt_list: %empty
   39          | stmt_list stmt

   40 func-call: T_id '(' ')'
   41          | T_id '(' expr expr_list ')'

   42 expr_list: %empty
   43          | expr_list ',' expr

   44 l-value: T_id
   45        | T_string
   46        | l-value '[' expr ']'

   47 expr: T_const
   48     | T_constchar
   49     | l-value
   50     | '(' expr ')'
   51     | func-call
   52     | '+' expr
   53     | '-' expr
   54     | expr '+' expr
   55     | expr '-' expr
   56     | expr '*' expr
   57     | expr "div" expr
   58     | expr "mod" expr

   59 cond: '(' cond ')'
   60     | "not" cond
   61     | cond "and" cond
   62     | cond "or" cond
   63     | expr '=' expr
   64     | expr '#' expr
   65     | expr '<' expr
   66     | expr '>' expr
   67     | expr T_leq expr
   68     | expr T_meq expr


Terminals, with rules where they appear

    $end (0) 0
    '#' (35) 64
    '(' (40) 5 40 41 50 59
    ')' (41) 5 40 41 50 59
    '*' (42) 56
    '+' (43) 52 54
    ',' (44) 12 43
    '-' (45) 53 55
    ':' (58) 5 9 10 27
    ';' (59) 7 26 27 28 29 31 35 36
    '<' (60) 65
    '=' (61) 63
    '>' (62) 66
    '[' (91) 17 21 22 46
    ']' (93) 17 21 22 46
    '{' (123) 37
    '}' (125) 37
    error (256)
    "and" (258) 61
    "char" (259) 14
    "div" (260) 57
    "do" (261) 34
    "else" (262) 33
    "fun" (263) 5
    "if" (264) 32 33
    "int" (265) 13
    "not" (266) 60
    "nothing" (267) 19
    "or" (268) 62
    "ref" (269) 10
    "return" (270) 35 36
    "then" (271) 32 33
    "var" (272) 27
    "while" (273) 34
    "mod" (274) 58
    T_id (275) 5 9 10 12 27 40 41 44
    T_const (276) 17 22 47
    T_constchar (277) 48
    T_string (278) 45
    T_leq (279) 67
    T_meq (280) 68
    T_assign (281) 29
    SIGN (282)


Nonterminals, with rules where they appear

    $accept (44)
        on left: 0
    program (45)
        on left: 1
        on right: 0
    func-def (46)
        on left: 2
        on right: 1 23
    local-def_list (47)
        on left: 3 4
        on right: 2 4
    header (48)
        on left: 5
        on right: 2 26
    fpar-def_list (49)
        on left: 6 7
        on right: 5 7
    fpar-def (50)
        on left: 8 9 10
        on right: 5 7
    id_list (51)
        on left: 11 12
        on right: 9 10 12 27
    data-type (52)
        on left: 13 14
        on right: 15 18 20 21 22
    type (53)
        on left: 15
        on right: 27
    int-const_list (54)
        on left: 16 17
        on right: 15 17 21 22
    ret-type (55)
        on left: 18 19
        on right: 5
    fpar-type (56)
        on left: 20 21 22
        on right: 9 10
    local-def (57)
        on left: 23 24 25
        on right: 4
    func-decl (58)
        on left: 26
        on right: 24
    var-def (59)
        on left: 27
        on right: 25
    stmt (60)
        on left: 28 29 30 31 32 33 34 35 36
        on right: 32 33 34 39
    block (61)
        on left: 37
        on right: 2 30
    stmt_list (62)
        on left: 38 39
        on right: 37 39
    func-call (63)
        on left: 40 41
        on right: 31 51
    expr_list (64)
        on left: 42 43
        on right: 41 43
    l-value (65)
        on left: 44 45 46
        on right: 29 46 49
    expr (66)
        on left: 47 48 49 50 51 52 53 54 55 56 57 58
        on right: 29 36 41 43 46 50 52 53 54 55 56 57 58 63 64 65 66 67 68
    cond (67)
        on left: 59 60 61 62 63 64 65 66 67 68
        on right: 32 33 34 59 60 61 62


State 0

    0 $accept: . program $end

    "fun"  shift, and go to state 1

    program   go to state 2
    func-def  go to state 3
    header    go to state 4


State 1

    5 header: "fun" . T_id '(' fpar-def fpar-def_list ')' ':' ret-type

    T_id  shift, and go to state 5


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

    1 program: func-def .

    $default  reduce using rule 1 (program)


State 4

    2 func-def: header . local-def_list block

    $default  reduce using rule 3 (local-def_list)

    local-def_list  go to state 7


State 5

    5 header: "fun" T_id . '(' fpar-def fpar-def_list ')' ':' ret-type

    '('  shift, and go to state 8


State 6

    0 $accept: program $end .

    $default  accept


State 7

    2 func-def: header local-def_list . block
    4 local-def_list: local-def_list . local-def

    "fun"  shift, and go to state 1
    "var"  shift, and go to state 9
    '{'    shift, and go to state 10

    func-def   go to state 11
    header     go to state 12
    local-def  go to state 13
    func-decl  go to state 14
    var-def    go to state 15
    block      go to state 16


State 8

    5 header: "fun" T_id '(' . fpar-def fpar-def_list ')' ':' ret-type

    "ref"  shift, and go to state 17
    T_id   shift, and go to state 18

    $default  reduce using rule 8 (fpar-def)

    fpar-def  go to state 19


State 9

   27 var-def: "var" . T_id id_list ':' type ';'

    T_id  shift, and go to state 20


State 10

   37 block: '{' . stmt_list '}'

    $default  reduce using rule 38 (stmt_list)

    stmt_list  go to state 21


State 11

   23 local-def: func-def .

    $default  reduce using rule 23 (local-def)


State 12

    2 func-def: header . local-def_list block
   26 func-decl: header . ';'

    ';'  shift, and go to state 22

    $default  reduce using rule 3 (local-def_list)

    local-def_list  go to state 7


State 13

    4 local-def_list: local-def_list local-def .

    $default  reduce using rule 4 (local-def_list)


State 14

   24 local-def: func-decl .

    $default  reduce using rule 24 (local-def)


State 15

   25 local-def: var-def .

    $default  reduce using rule 25 (local-def)


State 16

    2 func-def: header local-def_list block .

    $default  reduce using rule 2 (func-def)


State 17

   10 fpar-def: "ref" . T_id id_list ':' fpar-type

    T_id  shift, and go to state 23


State 18

    9 fpar-def: T_id . id_list ':' fpar-type

    $default  reduce using rule 11 (id_list)

    id_list  go to state 24


State 19

    5 header: "fun" T_id '(' fpar-def . fpar-def_list ')' ':' ret-type

    $default  reduce using rule 6 (fpar-def_list)

    fpar-def_list  go to state 25


State 20

   27 var-def: "var" T_id . id_list ':' type ';'

    $default  reduce using rule 11 (id_list)

    id_list  go to state 26


State 21

   37 block: '{' stmt_list . '}'
   39 stmt_list: stmt_list . stmt

    "if"      shift, and go to state 27
    "return"  shift, and go to state 28
    "while"   shift, and go to state 29
    T_id      shift, and go to state 30
    T_string  shift, and go to state 31
    ';'       shift, and go to state 32
    '{'       shift, and go to state 10
    '}'       shift, and go to state 33

    stmt       go to state 34
    block      go to state 35
    func-call  go to state 36
    l-value    go to state 37


State 22

   26 func-decl: header ';' .

    $default  reduce using rule 26 (func-decl)


State 23

   10 fpar-def: "ref" T_id . id_list ':' fpar-type

    $default  reduce using rule 11 (id_list)

    id_list  go to state 38


State 24

    9 fpar-def: T_id id_list . ':' fpar-type
   12 id_list: id_list . ',' T_id

    ':'  shift, and go to state 39
    ','  shift, and go to state 40


State 25

    5 header: "fun" T_id '(' fpar-def fpar-def_list . ')' ':' ret-type
    7 fpar-def_list: fpar-def_list . ';' fpar-def

    ')'  shift, and go to state 41
    ';'  shift, and go to state 42


State 26

   12 id_list: id_list . ',' T_id
   27 var-def: "var" T_id id_list . ':' type ';'

    ':'  shift, and go to state 43
    ','  shift, and go to state 40


State 27

   32 stmt: "if" . cond "then" stmt
   33     | "if" . cond "then" stmt "else" stmt

    "not"        shift, and go to state 44
    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 49

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 52
    cond       go to state 53


State 28

   35 stmt: "return" . ';'
   36     | "return" . expr ';'

    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 54
    ';'          shift, and go to state 55

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 56


State 29

   34 stmt: "while" . cond "do" stmt

    "not"        shift, and go to state 44
    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 49

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 52
    cond       go to state 57


State 30

   40 func-call: T_id . '(' ')'
   41          | T_id . '(' expr expr_list ')'
   44 l-value: T_id .

    '('  shift, and go to state 58

    $default  reduce using rule 44 (l-value)


State 31

   45 l-value: T_string .

    $default  reduce using rule 45 (l-value)


State 32

   28 stmt: ';' .

    $default  reduce using rule 28 (stmt)


State 33

   37 block: '{' stmt_list '}' .

    $default  reduce using rule 37 (block)


State 34

   39 stmt_list: stmt_list stmt .

    $default  reduce using rule 39 (stmt_list)


State 35

   30 stmt: block .

    $default  reduce using rule 30 (stmt)


State 36

   31 stmt: func-call . ';'

    ';'  shift, and go to state 59


State 37

   29 stmt: l-value . T_assign expr ';'
   46 l-value: l-value . '[' expr ']'

    T_assign  shift, and go to state 60
    '['       shift, and go to state 61


State 38

   10 fpar-def: "ref" T_id id_list . ':' fpar-type
   12 id_list: id_list . ',' T_id

    ':'  shift, and go to state 62
    ','  shift, and go to state 40


State 39

    9 fpar-def: T_id id_list ':' . fpar-type

    "char"  shift, and go to state 63
    "int"   shift, and go to state 64

    data-type  go to state 65
    fpar-type  go to state 66


State 40

   12 id_list: id_list ',' . T_id

    T_id  shift, and go to state 67


State 41

    5 header: "fun" T_id '(' fpar-def fpar-def_list ')' . ':' ret-type

    ':'  shift, and go to state 68


State 42

    7 fpar-def_list: fpar-def_list ';' . fpar-def

    "ref"  shift, and go to state 17
    T_id   shift, and go to state 18

    $default  reduce using rule 8 (fpar-def)

    fpar-def  go to state 69


State 43

   27 var-def: "var" T_id id_list ':' . type ';'

    "char"  shift, and go to state 63
    "int"   shift, and go to state 64

    data-type  go to state 70
    type       go to state 71


State 44

   60 cond: "not" . cond

    "not"        shift, and go to state 44
    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 49

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 52
    cond       go to state 72


State 45

   47 expr: T_const .

    $default  reduce using rule 47 (expr)


State 46

   48 expr: T_constchar .

    $default  reduce using rule 48 (expr)


State 47

   52 expr: '+' . expr

    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 54

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 73


State 48

   53 expr: '-' . expr

    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 54

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 74


State 49

   50 expr: '(' . expr ')'
   59 cond: '(' . cond ')'

    "not"        shift, and go to state 44
    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 49

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 75
    cond       go to state 76


State 50

   51 expr: func-call .

    $default  reduce using rule 51 (expr)


State 51

   46 l-value: l-value . '[' expr ']'
   49 expr: l-value .

    '['  shift, and go to state 61

    $default  reduce using rule 49 (expr)


State 52

   54 expr: expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . "div" expr
   58     | expr . "mod" expr
   63 cond: expr . '=' expr
   64     | expr . '#' expr
   65     | expr . '<' expr
   66     | expr . '>' expr
   67     | expr . T_leq expr
   68     | expr . T_meq expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    T_leq  shift, and go to state 79
    T_meq  shift, and go to state 80
    '='    shift, and go to state 81
    '#'    shift, and go to state 82
    '<'    shift, and go to state 83
    '>'    shift, and go to state 84
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87


State 53

   32 stmt: "if" cond . "then" stmt
   33     | "if" cond . "then" stmt "else" stmt
   61 cond: cond . "and" cond
   62     | cond . "or" cond

    "and"   shift, and go to state 88
    "or"    shift, and go to state 89
    "then"  shift, and go to state 90


State 54

   50 expr: '(' . expr ')'

    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 54

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 91


State 55

   35 stmt: "return" ';' .

    $default  reduce using rule 35 (stmt)


State 56

   36 stmt: "return" expr . ';'
   54 expr: expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . "div" expr
   58     | expr . "mod" expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87
    ';'    shift, and go to state 92


State 57

   34 stmt: "while" cond . "do" stmt
   61 cond: cond . "and" cond
   62     | cond . "or" cond

    "and"  shift, and go to state 88
    "do"   shift, and go to state 93
    "or"   shift, and go to state 89


State 58

   40 func-call: T_id '(' . ')'
   41          | T_id '(' . expr expr_list ')'

    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 54
    ')'          shift, and go to state 94

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 95


State 59

   31 stmt: func-call ';' .

    $default  reduce using rule 31 (stmt)


State 60

   29 stmt: l-value T_assign . expr ';'

    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 54

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 96


State 61

   46 l-value: l-value '[' . expr ']'

    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 54

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 97


State 62

   10 fpar-def: "ref" T_id id_list ':' . fpar-type

    "char"  shift, and go to state 63
    "int"   shift, and go to state 64

    data-type  go to state 65
    fpar-type  go to state 98


State 63

   14 data-type: "char" .

    $default  reduce using rule 14 (data-type)


State 64

   13 data-type: "int" .

    $default  reduce using rule 13 (data-type)


State 65

   20 fpar-type: data-type .
   21          | data-type . '[' ']' int-const_list
   22          | data-type . '[' T_const ']' int-const_list

    '['  shift, and go to state 99

    $default  reduce using rule 20 (fpar-type)


State 66

    9 fpar-def: T_id id_list ':' fpar-type .

    $default  reduce using rule 9 (fpar-def)


State 67

   12 id_list: id_list ',' T_id .

    $default  reduce using rule 12 (id_list)


State 68

    5 header: "fun" T_id '(' fpar-def fpar-def_list ')' ':' . ret-type

    "char"     shift, and go to state 63
    "int"      shift, and go to state 64
    "nothing"  shift, and go to state 100

    data-type  go to state 101
    ret-type   go to state 102


State 69

    7 fpar-def_list: fpar-def_list ';' fpar-def .

    $default  reduce using rule 7 (fpar-def_list)


State 70

   15 type: data-type . int-const_list

    $default  reduce using rule 16 (int-const_list)

    int-const_list  go to state 103


State 71

   27 var-def: "var" T_id id_list ':' type . ';'

    ';'  shift, and go to state 104


State 72

   60 cond: "not" cond .
   61     | cond . "and" cond
   62     | cond . "or" cond

    $default  reduce using rule 60 (cond)


State 73

   52 expr: '+' expr .
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . "div" expr
   58     | expr . "mod" expr

    $default  reduce using rule 52 (expr)


State 74

   53 expr: '-' expr .
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . "div" expr
   58     | expr . "mod" expr

    $default  reduce using rule 53 (expr)


State 75

   50 expr: '(' expr . ')'
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . "div" expr
   58     | expr . "mod" expr
   63 cond: expr . '=' expr
   64     | expr . '#' expr
   65     | expr . '<' expr
   66     | expr . '>' expr
   67     | expr . T_leq expr
   68     | expr . T_meq expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    T_leq  shift, and go to state 79
    T_meq  shift, and go to state 80
    '='    shift, and go to state 81
    '#'    shift, and go to state 82
    '<'    shift, and go to state 83
    '>'    shift, and go to state 84
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87
    ')'    shift, and go to state 105


State 76

   59 cond: '(' cond . ')'
   61     | cond . "and" cond
   62     | cond . "or" cond

    "and"  shift, and go to state 88
    "or"   shift, and go to state 89
    ')'    shift, and go to state 106


State 77

   57 expr: expr "div" . expr

    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 54

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 107


State 78

   58 expr: expr "mod" . expr

    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 54

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 108


State 79

   67 cond: expr T_leq . expr

    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 54

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 109


State 80

   68 cond: expr T_meq . expr

    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 54

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 110


State 81

   63 cond: expr '=' . expr

    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 54

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 111


State 82

   64 cond: expr '#' . expr

    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 54

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 112


State 83

   65 cond: expr '<' . expr

    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 54

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 113


State 84

   66 cond: expr '>' . expr

    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 54

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 114


State 85

   54 expr: expr '+' . expr

    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 54

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 115


State 86

   55 expr: expr '-' . expr

    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 54

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 116


State 87

   56 expr: expr '*' . expr

    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 54

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 117


State 88

   61 cond: cond "and" . cond

    "not"        shift, and go to state 44
    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 49

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 52
    cond       go to state 118


State 89

   62 cond: cond "or" . cond

    "not"        shift, and go to state 44
    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 49

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 52
    cond       go to state 119


State 90

   32 stmt: "if" cond "then" . stmt
   33     | "if" cond "then" . stmt "else" stmt

    "if"      shift, and go to state 27
    "return"  shift, and go to state 28
    "while"   shift, and go to state 29
    T_id      shift, and go to state 30
    T_string  shift, and go to state 31
    ';'       shift, and go to state 32
    '{'       shift, and go to state 10

    stmt       go to state 120
    block      go to state 35
    func-call  go to state 36
    l-value    go to state 37


State 91

   50 expr: '(' expr . ')'
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . "div" expr
   58     | expr . "mod" expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87
    ')'    shift, and go to state 105


State 92

   36 stmt: "return" expr ';' .

    $default  reduce using rule 36 (stmt)


State 93

   34 stmt: "while" cond "do" . stmt

    "if"      shift, and go to state 27
    "return"  shift, and go to state 28
    "while"   shift, and go to state 29
    T_id      shift, and go to state 30
    T_string  shift, and go to state 31
    ';'       shift, and go to state 32
    '{'       shift, and go to state 10

    stmt       go to state 121
    block      go to state 35
    func-call  go to state 36
    l-value    go to state 37


State 94

   40 func-call: T_id '(' ')' .

    $default  reduce using rule 40 (func-call)


State 95

   41 func-call: T_id '(' expr . expr_list ')'
   54 expr: expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . "div" expr
   58     | expr . "mod" expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87

    $default  reduce using rule 42 (expr_list)

    expr_list  go to state 122


State 96

   29 stmt: l-value T_assign expr . ';'
   54 expr: expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . "div" expr
   58     | expr . "mod" expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87
    ';'    shift, and go to state 123


State 97

   46 l-value: l-value '[' expr . ']'
   54 expr: expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . "div" expr
   58     | expr . "mod" expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87
    ']'    shift, and go to state 124


State 98

   10 fpar-def: "ref" T_id id_list ':' fpar-type .

    $default  reduce using rule 10 (fpar-def)


State 99

   21 fpar-type: data-type '[' . ']' int-const_list
   22          | data-type '[' . T_const ']' int-const_list

    T_const  shift, and go to state 125
    ']'      shift, and go to state 126


State 100

   19 ret-type: "nothing" .

    $default  reduce using rule 19 (ret-type)


State 101

   18 ret-type: data-type .

    $default  reduce using rule 18 (ret-type)


State 102

    5 header: "fun" T_id '(' fpar-def fpar-def_list ')' ':' ret-type .

    $default  reduce using rule 5 (header)


State 103

   15 type: data-type int-const_list .
   17 int-const_list: int-const_list . '[' T_const ']'

    '['  shift, and go to state 127

    $default  reduce using rule 15 (type)


State 104

   27 var-def: "var" T_id id_list ':' type ';' .

    $default  reduce using rule 27 (var-def)


State 105

   50 expr: '(' expr ')' .

    $default  reduce using rule 50 (expr)


State 106

   59 cond: '(' cond ')' .

    $default  reduce using rule 59 (cond)


State 107

   54 expr: expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . "div" expr
   57     | expr "div" expr .
   58     | expr . "mod" expr

    $default  reduce using rule 57 (expr)


State 108

   54 expr: expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . "div" expr
   58     | expr . "mod" expr
   58     | expr "mod" expr .

    $default  reduce using rule 58 (expr)


State 109

   54 expr: expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . "div" expr
   58     | expr . "mod" expr
   67 cond: expr T_leq expr .

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87

    $default  reduce using rule 67 (cond)


State 110

   54 expr: expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . "div" expr
   58     | expr . "mod" expr
   68 cond: expr T_meq expr .

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87

    $default  reduce using rule 68 (cond)


State 111

   54 expr: expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . "div" expr
   58     | expr . "mod" expr
   63 cond: expr '=' expr .

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87

    $default  reduce using rule 63 (cond)


State 112

   54 expr: expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . "div" expr
   58     | expr . "mod" expr
   64 cond: expr '#' expr .

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87

    $default  reduce using rule 64 (cond)


State 113

   54 expr: expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . "div" expr
   58     | expr . "mod" expr
   65 cond: expr '<' expr .

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87

    $default  reduce using rule 65 (cond)


State 114

   54 expr: expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . "div" expr
   58     | expr . "mod" expr
   66 cond: expr '>' expr .

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87

    $default  reduce using rule 66 (cond)


State 115

   54 expr: expr . '+' expr
   54     | expr '+' expr .
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . "div" expr
   58     | expr . "mod" expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '*'    shift, and go to state 87

    $default  reduce using rule 54 (expr)


State 116

   54 expr: expr . '+' expr
   55     | expr . '-' expr
   55     | expr '-' expr .
   56     | expr . '*' expr
   57     | expr . "div" expr
   58     | expr . "mod" expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '*'    shift, and go to state 87

    $default  reduce using rule 55 (expr)


State 117

   54 expr: expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   56     | expr '*' expr .
   57     | expr . "div" expr
   58     | expr . "mod" expr

    $default  reduce using rule 56 (expr)


State 118

   61 cond: cond . "and" cond
   61     | cond "and" cond .
   62     | cond . "or" cond

    $default  reduce using rule 61 (cond)


State 119

   61 cond: cond . "and" cond
   62     | cond . "or" cond
   62     | cond "or" cond .

    "and"  shift, and go to state 88

    $default  reduce using rule 62 (cond)


State 120

   32 stmt: "if" cond "then" stmt .
   33     | "if" cond "then" stmt . "else" stmt

    "else"  shift, and go to state 128

    "else"    [reduce using rule 32 (stmt)]
    $default  reduce using rule 32 (stmt)


State 121

   34 stmt: "while" cond "do" stmt .

    $default  reduce using rule 34 (stmt)


State 122

   41 func-call: T_id '(' expr expr_list . ')'
   43 expr_list: expr_list . ',' expr

    ')'  shift, and go to state 129
    ','  shift, and go to state 130


State 123

   29 stmt: l-value T_assign expr ';' .

    $default  reduce using rule 29 (stmt)


State 124

   46 l-value: l-value '[' expr ']' .

    $default  reduce using rule 46 (l-value)


State 125

   22 fpar-type: data-type '[' T_const . ']' int-const_list

    ']'  shift, and go to state 131


State 126

   21 fpar-type: data-type '[' ']' . int-const_list

    $default  reduce using rule 16 (int-const_list)

    int-const_list  go to state 132


State 127

   17 int-const_list: int-const_list '[' . T_const ']'

    T_const  shift, and go to state 133


State 128

   33 stmt: "if" cond "then" stmt "else" . stmt

    "if"      shift, and go to state 27
    "return"  shift, and go to state 28
    "while"   shift, and go to state 29
    T_id      shift, and go to state 30
    T_string  shift, and go to state 31
    ';'       shift, and go to state 32
    '{'       shift, and go to state 10

    stmt       go to state 134
    block      go to state 35
    func-call  go to state 36
    l-value    go to state 37


State 129

   41 func-call: T_id '(' expr expr_list ')' .

    $default  reduce using rule 41 (func-call)


State 130

   43 expr_list: expr_list ',' . expr

    T_id         shift, and go to state 30
    T_const      shift, and go to state 45
    T_constchar  shift, and go to state 46
    T_string     shift, and go to state 31
    '+'          shift, and go to state 47
    '-'          shift, and go to state 48
    '('          shift, and go to state 54

    func-call  go to state 50
    l-value    go to state 51
    expr       go to state 135


State 131

   22 fpar-type: data-type '[' T_const ']' . int-const_list

    $default  reduce using rule 16 (int-const_list)

    int-const_list  go to state 136


State 132

   17 int-const_list: int-const_list . '[' T_const ']'
   21 fpar-type: data-type '[' ']' int-const_list .

    '['  shift, and go to state 127

    $default  reduce using rule 21 (fpar-type)


State 133

   17 int-const_list: int-const_list '[' T_const . ']'

    ']'  shift, and go to state 137


State 134

   33 stmt: "if" cond "then" stmt "else" stmt .

    $default  reduce using rule 33 (stmt)


State 135

   43 expr_list: expr_list ',' expr .
   54 expr: expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . "div" expr
   58     | expr . "mod" expr

    "div"  shift, and go to state 77
    "mod"  shift, and go to state 78
    '+'    shift, and go to state 85
    '-'    shift, and go to state 86
    '*'    shift, and go to state 87

    $default  reduce using rule 43 (expr_list)


State 136

   17 int-const_list: int-const_list . '[' T_const ']'
   22 fpar-type: data-type '[' T_const ']' int-const_list .

    '['  shift, and go to state 127

    $default  reduce using rule 22 (fpar-type)


State 137

   17 int-const_list: int-const_list '[' T_const ']' .

    $default  reduce using rule 17 (int-const_list)
