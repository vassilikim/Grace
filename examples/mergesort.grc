$$ This is a mergeSort program written in Grace.
    It is not necessary able to return.
    But it should follow all the grammatical and sematic rules.
    Be cautious with the size N of the array
$$

fun main() : nothing
    fun mergeSort(ref array: int[]; begin, end : int) : nothing
        var mid : int;

        fun merge(ref array: int[]; first, mid, last : int): nothing
            var b: int[10];
            var i, j, k : int;
        {
            i<- first;
            j<-mid+1;
            k<-0;


            while( i<=mid and j<=last) do{
                if(array[i]<array[j]) then {
                    b[k]<-array[i];
                    k<-k+1;
                    i<-i+1;
                }
                else{
                    b[k]<-array[j];
                    k<-k+1;
                    j<-j+1;
                }
            }


            while(i<=mid) do {
                b[k]<-array[i];
                k<-k+1;
                i<-i+1;
            }

            while(j<=last) do {
                b[k]<-array[j];
                k<-k+1;
                j<-j+1;
            }

            i<-0;
            while i#k do{
                array[first+i]<-b[i];
                i<-i+1;
            }

        }

    {
        if (begin >= end) then
            return; $ Returns recursively
    
        mid <- begin + (end - begin) div 2;
        mergeSort(array, begin, mid);
        mergeSort(array, mid + 1, end);
        merge(array, begin, mid, end); 
    }



    var arr : int[10];
    var i, N : int;
{
    writeString("Give number of elements (less than 10):\n");
    N <- readInteger();
 
    writeString("Give the integers:\n");
    i<-0;
    while i#N do{
        arr[i]<-readInteger();
        i<-i+1;
    }


    mergeSort(arr, 0, N - 1);
    i<-0;
    while i#N do{
        writeInteger(arr[i]);
        writeString(", ");
        i<-i+1;
    }
    writeString("\n");
}