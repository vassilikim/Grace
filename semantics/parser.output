State 123 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: func-def

    2 func-def: header local-def_list block

    3 local-def_list: ε
    4               | local-def_list local-def

    5 header: "fun" T_id '(' ')' ':' ret-type
    6       | "fun" T_id '(' fpar-def_list ')' ':' ret-type

    7 fpar-def_list: fpar-def
    8              | fpar-def_list ';' fpar-def

    9 fpar-def: T_id id_list ':' fpar-type
   10         | "ref" T_id id_list ':' fpar-type

   11 id_list: ε
   12        | id_list ',' T_id

   13 data-type: "int"
   14          | "char"

   15 type: data-type int-const_list

   16 int-const_list: ε
   17               | int-const_list '[' T_const ']'

   18 ret-type: data-type
   19         | "nothing"

   20 fpar-type: data-type
   21          | data-type '[' ']' int-const_list
   22          | data-type '[' T_const ']' int-const_list

   23 local-def: func-def
   24          | func-decl
   25          | var-def

   26 func-decl: header ';'

   27 var-def: "var" T_id id_list ':' type ';'

   28 stmt: ';'
   29     | l-value "<-" expr ';'
   30     | block
   31     | func-call ';'
   32     | "if" cond "then" stmt
   33     | "if" cond "then" stmt "else" stmt
   34     | "while" cond "do" stmt
   35     | "return" ';'
   36     | "return" expr ';'

   37 block: '{' stmt_list '}'

   38 stmt_list: ε
   39          | stmt_list stmt

   40 func-call: T_id '(' ')'
   41          | T_id '(' expr expr_list ')'

   42 expr_list: ε
   43          | expr_list ',' expr

   44 l-value: T_id
   45        | T_string
   46        | l-value '[' expr ']'

   47 expr: T_const
   48     | T_constchar
   49     | l-value
   50     | '(' expr ')'
   51     | func-call
   52     | '+' expr
   53     | '-' expr
   54     | expr '+' expr
   55     | expr '-' expr
   56     | expr '*' expr
   57     | expr "div" expr
   58     | expr "mod" expr

   59 cond: '(' cond ')'
   60     | "not" cond
   61     | cond "and" cond
   62     | cond "or" cond
   63     | expr '=' expr
   64     | expr '#' expr
   65     | expr '<' expr
   66     | expr '>' expr
   67     | expr "<=" expr
   68     | expr ">=" expr


Terminals, with rules where they appear

    $end (0) 0
    '#' <condop> (35) 64
    '(' (40) 5 6 40 41 50 59
    ')' (41) 5 6 40 41 50 59
    '*' <binop> (42) 56
    '+' <binop> (43) 52 54
    ',' (44) 12 43
    '-' <binop> (45) 53 55
    ':' (58) 5 6 9 10 27
    ';' (59) 8 26 27 28 29 31 35 36
    '<' <condop> (60) 65
    '=' <condop> (61) 63
    '>' <condop> (62) 66
    '[' (91) 17 21 22 46
    ']' (93) 17 21 22 46
    '{' (123) 37
    '}' (125) 37
    error (256)
    "and" <condop> (258) 61
    "char" (259) 14
    "div" <binop> (260) 57
    "do" (261) 34
    "else" (262) 33
    "fun" (263) 5 6
    "if" (264) 32 33
    "int" (265) 13
    "not" (266) 60
    "nothing" (267) 19
    "or" <condop> (268) 62
    "ref" (269) 10
    "return" (270) 35 36
    "then" (271) 32 33
    "var" (272) 27
    "while" (273) 34
    "mod" <binop> (274) 58
    T_id <str> (275) 5 6 9 10 12 27 40 41 44
    T_const <num> (276) 17 22 47
    T_constchar <constchar> (277) 48
    T_string <str> (278) 45
    "<=" <condop> (279) 67
    ">=" <condop> (280) 68
    "<-" (281) 29
    SIGN (282)


Nonterminals, with rules where they appear

    $accept (44)
        on left: 0
    program <funcdef> (45)
        on left: 1
        on right: 0
    func-def <funcdef> (46)
        on left: 2
        on right: 1 23
    local-def_list <localdeflist> (47)
        on left: 3 4
        on right: 2 4
    header <header> (48)
        on left: 5 6
        on right: 2 26
    fpar-def_list <fpardeflist> (49)
        on left: 7 8
        on right: 6 8
    fpar-def <fpardef> (50)
        on left: 9 10
        on right: 7 8
    id_list <idlist> (51)
        on left: 11 12
        on right: 9 10 12 27
    data-type <datatype> (52)
        on left: 13 14
        on right: 15 18 20 21 22
    type <type> (53)
        on left: 15
        on right: 27
    int-const_list <constlist> (54)
        on left: 16 17
        on right: 15 17 21 22
    ret-type <rettype> (55)
        on left: 18 19
        on right: 5 6
    fpar-type <fpartype> (56)
        on left: 20 21 22
        on right: 9 10
    local-def <func> (57)
        on left: 23 24 25
        on right: 4
    func-decl <func> (58)
        on left: 26
        on right: 24
    var-def <func> (59)
        on left: 27
        on right: 25
    stmt <stmt> (60)
        on left: 28 29 30 31 32 33 34 35 36
        on right: 32 33 34 39
    block <block> (61)
        on left: 37
        on right: 2 30
    stmt_list <block> (62)
        on left: 38 39
        on right: 37 39
    func-call <funccall> (63)
        on left: 40 41
        on right: 31 51
    expr_list <exprlist> (64)
        on left: 42 43
        on right: 41 43
    l-value <expr> (65)
        on left: 44 45 46
        on right: 29 46 49
    expr <expr> (66)
        on left: 47 48 49 50 51 52 53 54 55 56 57 58
        on right: 29 36 41 43 46 50 52 53 54 55 56 57 58 63 64 65 66 67 68
    cond <expr> (67)
        on left: 59 60 61 62 63 64 65 66 67 68
        on right: 32 33 34 59 60 61 62


State 0

    0 $accept: • program $end

    "fun"  shift, and go to state 1

    program   go to state 2
    func-def  go to state 3
    header    go to state 4


State 1

    5 header: "fun" • T_id '(' ')' ':' ret-type
    6       | "fun" • T_id '(' fpar-def_list ')' ':' ret-type

    T_id  shift, and go to state 5


State 2

    0 $accept: program • $end

    $end  shift, and go to state 6


State 3

    1 program: func-def •

    $default  reduce using rule 1 (program)


State 4

    2 func-def: header • local-def_list block

    $default  reduce using rule 3 (local-def_list)

    local-def_list  go to state 7


State 5

    5 header: "fun" T_id • '(' ')' ':' ret-type
    6       | "fun" T_id • '(' fpar-def_list ')' ':' ret-type

    '('  shift, and go to state 8


State 6

    0 $accept: program $end •

    $default  accept


State 7

    2 func-def: header local-def_list • block
    4 local-def_list: local-def_list • local-def

    "fun"  shift, and go to state 1
    "var"  shift, and go to state 9
    '{'    shift, and go to state 10

    func-def   go to state 11
    header     go to state 12
    local-def  go to state 13
    func-decl  go to state 14
    var-def    go to state 15
    block      go to state 16


State 8

    5 header: "fun" T_id '(' • ')' ':' ret-type
    6       | "fun" T_id '(' • fpar-def_list ')' ':' ret-type

    "ref"  shift, and go to state 17
    T_id   shift, and go to state 18
    ')'    shift, and go to state 19

    fpar-def_list  go to state 20
    fpar-def       go to state 21


State 9

   27 var-def: "var" • T_id id_list ':' type ';'

    T_id  shift, and go to state 22


State 10

   37 block: '{' • stmt_list '}'

    $default  reduce using rule 38 (stmt_list)

    stmt_list  go to state 23


State 11

   23 local-def: func-def •

    $default  reduce using rule 23 (local-def)


State 12

    2 func-def: header • local-def_list block
   26 func-decl: header • ';'

    ';'  shift, and go to state 24

    $default  reduce using rule 3 (local-def_list)

    local-def_list  go to state 7


State 13

    4 local-def_list: local-def_list local-def •

    $default  reduce using rule 4 (local-def_list)


State 14

   24 local-def: func-decl •

    $default  reduce using rule 24 (local-def)


State 15

   25 local-def: var-def •

    $default  reduce using rule 25 (local-def)


State 16

    2 func-def: header local-def_list block •

    $default  reduce using rule 2 (func-def)


State 17

   10 fpar-def: "ref" • T_id id_list ':' fpar-type

    T_id  shift, and go to state 25


State 18

    9 fpar-def: T_id • id_list ':' fpar-type

    $default  reduce using rule 11 (id_list)

    id_list  go to state 26


State 19

    5 header: "fun" T_id '(' ')' • ':' ret-type

    ':'  shift, and go to state 27


State 20

    6 header: "fun" T_id '(' fpar-def_list • ')' ':' ret-type
    8 fpar-def_list: fpar-def_list • ';' fpar-def

    ')'  shift, and go to state 28
    ';'  shift, and go to state 29


State 21

    7 fpar-def_list: fpar-def •

    $default  reduce using rule 7 (fpar-def_list)


State 22

   27 var-def: "var" T_id • id_list ':' type ';'

    $default  reduce using rule 11 (id_list)

    id_list  go to state 30


State 23

   37 block: '{' stmt_list • '}'
   39 stmt_list: stmt_list • stmt

    "if"      shift, and go to state 31
    "return"  shift, and go to state 32
    "while"   shift, and go to state 33
    T_id      shift, and go to state 34
    T_string  shift, and go to state 35
    ';'       shift, and go to state 36
    '{'       shift, and go to state 10
    '}'       shift, and go to state 37

    stmt       go to state 38
    block      go to state 39
    func-call  go to state 40
    l-value    go to state 41


State 24

   26 func-decl: header ';' •

    $default  reduce using rule 26 (func-decl)


State 25

   10 fpar-def: "ref" T_id • id_list ':' fpar-type

    $default  reduce using rule 11 (id_list)

    id_list  go to state 42


State 26

    9 fpar-def: T_id id_list • ':' fpar-type
   12 id_list: id_list • ',' T_id

    ':'  shift, and go to state 43
    ','  shift, and go to state 44


State 27

    5 header: "fun" T_id '(' ')' ':' • ret-type

    "char"     shift, and go to state 45
    "int"      shift, and go to state 46
    "nothing"  shift, and go to state 47

    data-type  go to state 48
    ret-type   go to state 49


State 28

    6 header: "fun" T_id '(' fpar-def_list ')' • ':' ret-type

    ':'  shift, and go to state 50


State 29

    8 fpar-def_list: fpar-def_list ';' • fpar-def

    "ref"  shift, and go to state 17
    T_id   shift, and go to state 18

    fpar-def  go to state 51


State 30

   12 id_list: id_list • ',' T_id
   27 var-def: "var" T_id id_list • ':' type ';'

    ':'  shift, and go to state 52
    ','  shift, and go to state 44


State 31

   32 stmt: "if" • cond "then" stmt
   33     | "if" • cond "then" stmt "else" stmt

    "not"        shift, and go to state 53
    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 58

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 61
    cond       go to state 62


State 32

   35 stmt: "return" • ';'
   36     | "return" • expr ';'

    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 63
    ';'          shift, and go to state 64

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 65


State 33

   34 stmt: "while" • cond "do" stmt

    "not"        shift, and go to state 53
    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 58

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 61
    cond       go to state 66


State 34

   40 func-call: T_id • '(' ')'
   41          | T_id • '(' expr expr_list ')'
   44 l-value: T_id •

    '('  shift, and go to state 67

    $default  reduce using rule 44 (l-value)


State 35

   45 l-value: T_string •

    $default  reduce using rule 45 (l-value)


State 36

   28 stmt: ';' •

    $default  reduce using rule 28 (stmt)


State 37

   37 block: '{' stmt_list '}' •

    $default  reduce using rule 37 (block)


State 38

   39 stmt_list: stmt_list stmt •

    $default  reduce using rule 39 (stmt_list)


State 39

   30 stmt: block •

    $default  reduce using rule 30 (stmt)


State 40

   31 stmt: func-call • ';'

    ';'  shift, and go to state 68


State 41

   29 stmt: l-value • "<-" expr ';'
   46 l-value: l-value • '[' expr ']'

    "<-"  shift, and go to state 69
    '['   shift, and go to state 70


State 42

   10 fpar-def: "ref" T_id id_list • ':' fpar-type
   12 id_list: id_list • ',' T_id

    ':'  shift, and go to state 71
    ','  shift, and go to state 44


State 43

    9 fpar-def: T_id id_list ':' • fpar-type

    "char"  shift, and go to state 45
    "int"   shift, and go to state 46

    data-type  go to state 72
    fpar-type  go to state 73


State 44

   12 id_list: id_list ',' • T_id

    T_id  shift, and go to state 74


State 45

   14 data-type: "char" •

    $default  reduce using rule 14 (data-type)


State 46

   13 data-type: "int" •

    $default  reduce using rule 13 (data-type)


State 47

   19 ret-type: "nothing" •

    $default  reduce using rule 19 (ret-type)


State 48

   18 ret-type: data-type •

    $default  reduce using rule 18 (ret-type)


State 49

    5 header: "fun" T_id '(' ')' ':' ret-type •

    $default  reduce using rule 5 (header)


State 50

    6 header: "fun" T_id '(' fpar-def_list ')' ':' • ret-type

    "char"     shift, and go to state 45
    "int"      shift, and go to state 46
    "nothing"  shift, and go to state 47

    data-type  go to state 48
    ret-type   go to state 75


State 51

    8 fpar-def_list: fpar-def_list ';' fpar-def •

    $default  reduce using rule 8 (fpar-def_list)


State 52

   27 var-def: "var" T_id id_list ':' • type ';'

    "char"  shift, and go to state 45
    "int"   shift, and go to state 46

    data-type  go to state 76
    type       go to state 77


State 53

   60 cond: "not" • cond

    "not"        shift, and go to state 53
    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 58

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 61
    cond       go to state 78


State 54

   47 expr: T_const •

    $default  reduce using rule 47 (expr)


State 55

   48 expr: T_constchar •

    $default  reduce using rule 48 (expr)


State 56

   52 expr: '+' • expr

    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 63

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 79


State 57

   53 expr: '-' • expr

    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 63

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 80


State 58

   50 expr: '(' • expr ')'
   59 cond: '(' • cond ')'

    "not"        shift, and go to state 53
    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 58

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 81
    cond       go to state 82


State 59

   51 expr: func-call •

    $default  reduce using rule 51 (expr)


State 60

   46 l-value: l-value • '[' expr ']'
   49 expr: l-value •

    '['  shift, and go to state 70

    $default  reduce using rule 49 (expr)


State 61

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • "div" expr
   58     | expr • "mod" expr
   63 cond: expr • '=' expr
   64     | expr • '#' expr
   65     | expr • '<' expr
   66     | expr • '>' expr
   67     | expr • "<=" expr
   68     | expr • ">=" expr

    "div"  shift, and go to state 83
    "mod"  shift, and go to state 84
    "<="   shift, and go to state 85
    ">="   shift, and go to state 86
    '='    shift, and go to state 87
    '#'    shift, and go to state 88
    '<'    shift, and go to state 89
    '>'    shift, and go to state 90
    '+'    shift, and go to state 91
    '-'    shift, and go to state 92
    '*'    shift, and go to state 93


State 62

   32 stmt: "if" cond • "then" stmt
   33     | "if" cond • "then" stmt "else" stmt
   61 cond: cond • "and" cond
   62     | cond • "or" cond

    "and"   shift, and go to state 94
    "or"    shift, and go to state 95
    "then"  shift, and go to state 96


State 63

   50 expr: '(' • expr ')'

    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 63

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 97


State 64

   35 stmt: "return" ';' •

    $default  reduce using rule 35 (stmt)


State 65

   36 stmt: "return" expr • ';'
   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • "div" expr
   58     | expr • "mod" expr

    "div"  shift, and go to state 83
    "mod"  shift, and go to state 84
    '+'    shift, and go to state 91
    '-'    shift, and go to state 92
    '*'    shift, and go to state 93
    ';'    shift, and go to state 98


State 66

   34 stmt: "while" cond • "do" stmt
   61 cond: cond • "and" cond
   62     | cond • "or" cond

    "and"  shift, and go to state 94
    "do"   shift, and go to state 99
    "or"   shift, and go to state 95


State 67

   40 func-call: T_id '(' • ')'
   41          | T_id '(' • expr expr_list ')'

    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 63
    ')'          shift, and go to state 100

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 101


State 68

   31 stmt: func-call ';' •

    $default  reduce using rule 31 (stmt)


State 69

   29 stmt: l-value "<-" • expr ';'

    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 63

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 102


State 70

   46 l-value: l-value '[' • expr ']'

    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 63

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 103


State 71

   10 fpar-def: "ref" T_id id_list ':' • fpar-type

    "char"  shift, and go to state 45
    "int"   shift, and go to state 46

    data-type  go to state 72
    fpar-type  go to state 104


State 72

   20 fpar-type: data-type •
   21          | data-type • '[' ']' int-const_list
   22          | data-type • '[' T_const ']' int-const_list

    '['  shift, and go to state 105

    $default  reduce using rule 20 (fpar-type)


State 73

    9 fpar-def: T_id id_list ':' fpar-type •

    $default  reduce using rule 9 (fpar-def)


State 74

   12 id_list: id_list ',' T_id •

    $default  reduce using rule 12 (id_list)


State 75

    6 header: "fun" T_id '(' fpar-def_list ')' ':' ret-type •

    $default  reduce using rule 6 (header)


State 76

   15 type: data-type • int-const_list

    $default  reduce using rule 16 (int-const_list)

    int-const_list  go to state 106


State 77

   27 var-def: "var" T_id id_list ':' type • ';'

    ';'  shift, and go to state 107


State 78

   60 cond: "not" cond •
   61     | cond • "and" cond
   62     | cond • "or" cond

    $default  reduce using rule 60 (cond)


State 79

   52 expr: '+' expr •
   54     | expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • "div" expr
   58     | expr • "mod" expr

    $default  reduce using rule 52 (expr)


State 80

   53 expr: '-' expr •
   54     | expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • "div" expr
   58     | expr • "mod" expr

    $default  reduce using rule 53 (expr)


State 81

   50 expr: '(' expr • ')'
   54     | expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • "div" expr
   58     | expr • "mod" expr
   63 cond: expr • '=' expr
   64     | expr • '#' expr
   65     | expr • '<' expr
   66     | expr • '>' expr
   67     | expr • "<=" expr
   68     | expr • ">=" expr

    "div"  shift, and go to state 83
    "mod"  shift, and go to state 84
    "<="   shift, and go to state 85
    ">="   shift, and go to state 86
    '='    shift, and go to state 87
    '#'    shift, and go to state 88
    '<'    shift, and go to state 89
    '>'    shift, and go to state 90
    '+'    shift, and go to state 91
    '-'    shift, and go to state 92
    '*'    shift, and go to state 93
    ')'    shift, and go to state 108


State 82

   59 cond: '(' cond • ')'
   61     | cond • "and" cond
   62     | cond • "or" cond

    "and"  shift, and go to state 94
    "or"   shift, and go to state 95
    ')'    shift, and go to state 109


State 83

   57 expr: expr "div" • expr

    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 63

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 110


State 84

   58 expr: expr "mod" • expr

    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 63

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 111


State 85

   67 cond: expr "<=" • expr

    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 63

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 112


State 86

   68 cond: expr ">=" • expr

    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 63

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 113


State 87

   63 cond: expr '=' • expr

    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 63

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 114


State 88

   64 cond: expr '#' • expr

    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 63

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 115


State 89

   65 cond: expr '<' • expr

    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 63

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 116


State 90

   66 cond: expr '>' • expr

    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 63

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 117


State 91

   54 expr: expr '+' • expr

    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 63

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 118


State 92

   55 expr: expr '-' • expr

    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 63

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 119


State 93

   56 expr: expr '*' • expr

    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 63

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 120


State 94

   61 cond: cond "and" • cond

    "not"        shift, and go to state 53
    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 58

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 61
    cond       go to state 121


State 95

   62 cond: cond "or" • cond

    "not"        shift, and go to state 53
    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 58

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 61
    cond       go to state 122


State 96

   32 stmt: "if" cond "then" • stmt
   33     | "if" cond "then" • stmt "else" stmt

    "if"      shift, and go to state 31
    "return"  shift, and go to state 32
    "while"   shift, and go to state 33
    T_id      shift, and go to state 34
    T_string  shift, and go to state 35
    ';'       shift, and go to state 36
    '{'       shift, and go to state 10

    stmt       go to state 123
    block      go to state 39
    func-call  go to state 40
    l-value    go to state 41


State 97

   50 expr: '(' expr • ')'
   54     | expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • "div" expr
   58     | expr • "mod" expr

    "div"  shift, and go to state 83
    "mod"  shift, and go to state 84
    '+'    shift, and go to state 91
    '-'    shift, and go to state 92
    '*'    shift, and go to state 93
    ')'    shift, and go to state 108


State 98

   36 stmt: "return" expr ';' •

    $default  reduce using rule 36 (stmt)


State 99

   34 stmt: "while" cond "do" • stmt

    "if"      shift, and go to state 31
    "return"  shift, and go to state 32
    "while"   shift, and go to state 33
    T_id      shift, and go to state 34
    T_string  shift, and go to state 35
    ';'       shift, and go to state 36
    '{'       shift, and go to state 10

    stmt       go to state 124
    block      go to state 39
    func-call  go to state 40
    l-value    go to state 41


State 100

   40 func-call: T_id '(' ')' •

    $default  reduce using rule 40 (func-call)


State 101

   41 func-call: T_id '(' expr • expr_list ')'
   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • "div" expr
   58     | expr • "mod" expr

    "div"  shift, and go to state 83
    "mod"  shift, and go to state 84
    '+'    shift, and go to state 91
    '-'    shift, and go to state 92
    '*'    shift, and go to state 93

    $default  reduce using rule 42 (expr_list)

    expr_list  go to state 125


State 102

   29 stmt: l-value "<-" expr • ';'
   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • "div" expr
   58     | expr • "mod" expr

    "div"  shift, and go to state 83
    "mod"  shift, and go to state 84
    '+'    shift, and go to state 91
    '-'    shift, and go to state 92
    '*'    shift, and go to state 93
    ';'    shift, and go to state 126


State 103

   46 l-value: l-value '[' expr • ']'
   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • "div" expr
   58     | expr • "mod" expr

    "div"  shift, and go to state 83
    "mod"  shift, and go to state 84
    '+'    shift, and go to state 91
    '-'    shift, and go to state 92
    '*'    shift, and go to state 93
    ']'    shift, and go to state 127


State 104

   10 fpar-def: "ref" T_id id_list ':' fpar-type •

    $default  reduce using rule 10 (fpar-def)


State 105

   21 fpar-type: data-type '[' • ']' int-const_list
   22          | data-type '[' • T_const ']' int-const_list

    T_const  shift, and go to state 128
    ']'      shift, and go to state 129


State 106

   15 type: data-type int-const_list •
   17 int-const_list: int-const_list • '[' T_const ']'

    '['  shift, and go to state 130

    $default  reduce using rule 15 (type)


State 107

   27 var-def: "var" T_id id_list ':' type ';' •

    $default  reduce using rule 27 (var-def)


State 108

   50 expr: '(' expr ')' •

    $default  reduce using rule 50 (expr)


State 109

   59 cond: '(' cond ')' •

    $default  reduce using rule 59 (cond)


State 110

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • "div" expr
   57     | expr "div" expr •
   58     | expr • "mod" expr

    $default  reduce using rule 57 (expr)


State 111

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • "div" expr
   58     | expr • "mod" expr
   58     | expr "mod" expr •

    $default  reduce using rule 58 (expr)


State 112

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • "div" expr
   58     | expr • "mod" expr
   67 cond: expr "<=" expr •

    "div"  shift, and go to state 83
    "mod"  shift, and go to state 84
    '+'    shift, and go to state 91
    '-'    shift, and go to state 92
    '*'    shift, and go to state 93

    $default  reduce using rule 67 (cond)


State 113

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • "div" expr
   58     | expr • "mod" expr
   68 cond: expr ">=" expr •

    "div"  shift, and go to state 83
    "mod"  shift, and go to state 84
    '+'    shift, and go to state 91
    '-'    shift, and go to state 92
    '*'    shift, and go to state 93

    $default  reduce using rule 68 (cond)


State 114

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • "div" expr
   58     | expr • "mod" expr
   63 cond: expr '=' expr •

    "div"  shift, and go to state 83
    "mod"  shift, and go to state 84
    '+'    shift, and go to state 91
    '-'    shift, and go to state 92
    '*'    shift, and go to state 93

    $default  reduce using rule 63 (cond)


State 115

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • "div" expr
   58     | expr • "mod" expr
   64 cond: expr '#' expr •

    "div"  shift, and go to state 83
    "mod"  shift, and go to state 84
    '+'    shift, and go to state 91
    '-'    shift, and go to state 92
    '*'    shift, and go to state 93

    $default  reduce using rule 64 (cond)


State 116

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • "div" expr
   58     | expr • "mod" expr
   65 cond: expr '<' expr •

    "div"  shift, and go to state 83
    "mod"  shift, and go to state 84
    '+'    shift, and go to state 91
    '-'    shift, and go to state 92
    '*'    shift, and go to state 93

    $default  reduce using rule 65 (cond)


State 117

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • "div" expr
   58     | expr • "mod" expr
   66 cond: expr '>' expr •

    "div"  shift, and go to state 83
    "mod"  shift, and go to state 84
    '+'    shift, and go to state 91
    '-'    shift, and go to state 92
    '*'    shift, and go to state 93

    $default  reduce using rule 66 (cond)


State 118

   54 expr: expr • '+' expr
   54     | expr '+' expr •
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • "div" expr
   58     | expr • "mod" expr

    "div"  shift, and go to state 83
    "mod"  shift, and go to state 84
    '*'    shift, and go to state 93

    $default  reduce using rule 54 (expr)


State 119

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   55     | expr '-' expr •
   56     | expr • '*' expr
   57     | expr • "div" expr
   58     | expr • "mod" expr

    "div"  shift, and go to state 83
    "mod"  shift, and go to state 84
    '*'    shift, and go to state 93

    $default  reduce using rule 55 (expr)


State 120

   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   56     | expr '*' expr •
   57     | expr • "div" expr
   58     | expr • "mod" expr

    $default  reduce using rule 56 (expr)


State 121

   61 cond: cond • "and" cond
   61     | cond "and" cond •
   62     | cond • "or" cond

    $default  reduce using rule 61 (cond)


State 122

   61 cond: cond • "and" cond
   62     | cond • "or" cond
   62     | cond "or" cond •

    "and"  shift, and go to state 94

    $default  reduce using rule 62 (cond)


State 123

   32 stmt: "if" cond "then" stmt •
   33     | "if" cond "then" stmt • "else" stmt

    "else"  shift, and go to state 131

    "else"    [reduce using rule 32 (stmt)]
    $default  reduce using rule 32 (stmt)


State 124

   34 stmt: "while" cond "do" stmt •

    $default  reduce using rule 34 (stmt)


State 125

   41 func-call: T_id '(' expr expr_list • ')'
   43 expr_list: expr_list • ',' expr

    ')'  shift, and go to state 132
    ','  shift, and go to state 133


State 126

   29 stmt: l-value "<-" expr ';' •

    $default  reduce using rule 29 (stmt)


State 127

   46 l-value: l-value '[' expr ']' •

    $default  reduce using rule 46 (l-value)


State 128

   22 fpar-type: data-type '[' T_const • ']' int-const_list

    ']'  shift, and go to state 134


State 129

   21 fpar-type: data-type '[' ']' • int-const_list

    $default  reduce using rule 16 (int-const_list)

    int-const_list  go to state 135


State 130

   17 int-const_list: int-const_list '[' • T_const ']'

    T_const  shift, and go to state 136


State 131

   33 stmt: "if" cond "then" stmt "else" • stmt

    "if"      shift, and go to state 31
    "return"  shift, and go to state 32
    "while"   shift, and go to state 33
    T_id      shift, and go to state 34
    T_string  shift, and go to state 35
    ';'       shift, and go to state 36
    '{'       shift, and go to state 10

    stmt       go to state 137
    block      go to state 39
    func-call  go to state 40
    l-value    go to state 41


State 132

   41 func-call: T_id '(' expr expr_list ')' •

    $default  reduce using rule 41 (func-call)


State 133

   43 expr_list: expr_list ',' • expr

    T_id         shift, and go to state 34
    T_const      shift, and go to state 54
    T_constchar  shift, and go to state 55
    T_string     shift, and go to state 35
    '+'          shift, and go to state 56
    '-'          shift, and go to state 57
    '('          shift, and go to state 63

    func-call  go to state 59
    l-value    go to state 60
    expr       go to state 138


State 134

   22 fpar-type: data-type '[' T_const ']' • int-const_list

    $default  reduce using rule 16 (int-const_list)

    int-const_list  go to state 139


State 135

   17 int-const_list: int-const_list • '[' T_const ']'
   21 fpar-type: data-type '[' ']' int-const_list •

    '['  shift, and go to state 130

    $default  reduce using rule 21 (fpar-type)


State 136

   17 int-const_list: int-const_list '[' T_const • ']'

    ']'  shift, and go to state 140


State 137

   33 stmt: "if" cond "then" stmt "else" stmt •

    $default  reduce using rule 33 (stmt)


State 138

   43 expr_list: expr_list ',' expr •
   54 expr: expr • '+' expr
   55     | expr • '-' expr
   56     | expr • '*' expr
   57     | expr • "div" expr
   58     | expr • "mod" expr

    "div"  shift, and go to state 83
    "mod"  shift, and go to state 84
    '+'    shift, and go to state 91
    '-'    shift, and go to state 92
    '*'    shift, and go to state 93

    $default  reduce using rule 43 (expr_list)


State 139

   17 int-const_list: int-const_list • '[' T_const ']'
   22 fpar-type: data-type '[' T_const ']' int-const_list •

    '['  shift, and go to state 130

    $default  reduce using rule 22 (fpar-type)


State 140

   17 int-const_list: int-const_list '[' T_const ']' •

    $default  reduce using rule 17 (int-const_list)
